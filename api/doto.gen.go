//go:build go1.22

// Package dotoapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package dotoapi

import (
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
)

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	Code        int    `json:"code"`
	Description string `json:"description"`
}

// Task defines model for Task.
type Task struct {
	Description string `json:"description"`
	Id          string `json:"id"`
	Status      string `json:"status"`
}

// TaskCreation defines model for TaskCreation.
type TaskCreation struct {
	Description string `json:"description"`
	Status      string `json:"status"`
}

// TaskStatusUpdate defines model for TaskStatusUpdate.
type TaskStatusUpdate struct {
	Status string `json:"status"`
}

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	TgChatId int64 `json:"TgChatId"`
}

// PostTasksParams defines parameters for PostTasks.
type PostTasksParams struct {
	TgChatId int64 `json:"TgChatId"`
}

// DeleteTasksTaskIdParams defines parameters for DeleteTasksTaskId.
type DeleteTasksTaskIdParams struct {
	TgChatId int64 `json:"TgChatId"`
}

// PutTasksTaskIdParams defines parameters for PutTasksTaskId.
type PutTasksTaskIdParams struct {
	TgChatId int64 `json:"TgChatId"`
}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = TaskCreation

// PutTasksTaskIdJSONRequestBody defines body for PutTasksTaskId for application/json ContentType.
type PutTasksTaskIdJSONRequestBody = TaskStatusUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(w http.ResponseWriter, r *http.Request, params GetTasksParams)
	// Create task
	// (POST /tasks)
	PostTasks(w http.ResponseWriter, r *http.Request, params PostTasksParams)
	// Delete task
	// (DELETE /tasks/{taskId})
	DeleteTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string, params DeleteTasksTaskIdParams)
	// Update task status
	// (PUT /tasks/{taskId})
	PutTasksTaskId(w http.ResponseWriter, r *http.Request, taskId string, params PutTasksTaskIdParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams

	headers := r.Header

	// ------------- Required header parameter "TgChatId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("TgChatId")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "TgChatId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "TgChatId", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "TgChatId", Err: err})
			return
		}

		params.TgChatId = TgChatId

	} else {
		err := fmt.Errorf("Header parameter TgChatId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "TgChatId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostTasks operation middleware
func (siw *ServerInterfaceWrapper) PostTasks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTasksParams

	headers := r.Header

	// ------------- Required header parameter "TgChatId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("TgChatId")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "TgChatId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "TgChatId", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "TgChatId", Err: err})
			return
		}

		params.TgChatId = TgChatId

	} else {
		err := fmt.Errorf("Header parameter TgChatId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "TgChatId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTasks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTasksTaskId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTasksTaskIdParams

	headers := r.Header

	// ------------- Required header parameter "TgChatId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("TgChatId")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "TgChatId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "TgChatId", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "TgChatId", Err: err})
			return
		}

		params.TgChatId = TgChatId

	} else {
		err := fmt.Errorf("Header parameter TgChatId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "TgChatId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTasksTaskId(w, r, taskId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutTasksTaskId operation middleware
func (siw *ServerInterfaceWrapper) PutTasksTaskId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutTasksTaskIdParams

	headers := r.Header

	// ------------- Required header parameter "TgChatId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("TgChatId")]; found {
		var TgChatId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "TgChatId", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "TgChatId", valueList[0], &TgChatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "TgChatId", Err: err})
			return
		}

		params.TgChatId = TgChatId

	} else {
		err := fmt.Errorf("Header parameter TgChatId is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "TgChatId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutTasksTaskId(w, r, taskId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/tasks", wrapper.GetTasks)
	m.HandleFunc("POST "+options.BaseURL+"/tasks", wrapper.PostTasks)
	m.HandleFunc("DELETE "+options.BaseURL+"/tasks/{taskId}", wrapper.DeleteTasksTaskId)
	m.HandleFunc("PUT "+options.BaseURL+"/tasks/{taskId}", wrapper.PutTasksTaskId)

	return m
}
